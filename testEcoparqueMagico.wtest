import habitantes.*
import trabajadores.*
import ecoparque.* 

describe "Test Primera Parte" {

  test "que Laura pueda cuidar al Dragon" {
    dragon.asignarCuidador(laura)
    assert.equals(laura,dragon.cuidadorAsignado())
  }

  test "que Rodrigo no pueda cuidar a Gargola" {
    gargola.asignarCuidador(rodrigo)
    assert.notEquals(rodrigo, gargola.cuidadorAsignado())
  }

  test "que Rodrigo no pueda cuidar a Gargola cambiando de turno"{
    rodrigo.cambiarTurno()
    gargola.asignarCuidador(rodrigo)
    assert.equals(rodrigo, gargola.cuidadorAsignado())
  }

  test "que German pueda cuidar a Fenix" {
    fenix.asignarCuidador(german)
    assert.equals(german, fenix.cuidadorAsignado())
  }

  test "que Jimena pueda cuidar a Sirena" {
    sirena.asignarCuidador(jimena)
    assert.equals(jimena, sirena.cuidadorAsignado())
  }
}

describe "Test Segunda Parte"{
  test "contratar a un trabajador"{
    ecoparque.contratarTrabajador(rodrigo)
    assert.equals(4, ecoparque.trabajadores().size())
  }

  test "despedir a un trabajador"{
    ecoparque.despedirTrabajador(jimena)
    assert.equals(2, ecoparque.trabajadores().size())
  }

  test "despedir a todos los trabajadores"{
    ecoparque.despedirATodosLosTrabajadores()
    assert.that(ecoparque.trabajadores().isEmpty())
  }

  test "El equipo de trabajadores es grande"{
    ecoparque.contratarTrabajador(rodrigo)
    assert.that(ecoparque.elEquipoEsGrande())
  }

  test "El ecoparque no necesita trabajadores"{
    assert.notThat(ecoparque.trabajadores().isEmpty())
  }
}

describe "Test Tercera Parte"{
  test "Dragon puede ser cuidado por el ecoparque"{
    assert.that(ecoparque.habitantePuedeSerCuidado(dragon))
  }

  test "German y Jimena pueden cuidar a Fenix"{
    assert.equals(#{german,jimena}, ecoparque.obtenerATodosLosQuePuedenCuidarA_(fenix))
  }

  test "German cuida a sirena"{
    assert.equals(german, ecoparque.cuidarDeUnHabitanteElegido(sirena))
  }

  test "Cuidar de todos los animales"{
    ecoparque.cuidarDeTodosLosAnimales()
    assert.notEquals(null, dragon.cuidadorAsignado())
    assert.notEquals(null, unicornio.cuidadorAsignado())
    assert.notEquals(null, sirena.cuidadorAsignado())
    assert.notEquals(null, gargola.cuidadorAsignado())
    assert.notEquals(null, fenix.cuidadorAsignado())
  }

  test "Pas√≥ el dia para el fenix"{
    ecoparque.pasarElDia()
    assert.notThat(fenix.pelajeReluciente())
  }

  test "Paso el dia para la gargola"{
    ecoparque.pasarElDia()
    assert.equals(20, gargola.edad())
  }

  test "El habitante mas viejo es fenix"{
    assert.equals(fenix,ecoparque.encontrarHabitanteMasViejo())
  }

  test "El habitante mas joven es gargola"{
    assert.equals(gargola,ecoparque.encontrarHabitanteMasJoven())
  }

  test "Todos los trabajadores aprenden a nadar"{
    ecoparque.realizarTallerDeNatacion()
    assert.that(laura.nadar())
  }

  test "Todos los trabajadores aprenden a resistir a altas temperaturas"{
    ecoparque.contratarTrabajador(rodrigo)
    ecoparque.realizarTallerDeResistenciaAlFuego()
    assert.that(rodrigo.resisteAltasTemperaturas())
  }
}